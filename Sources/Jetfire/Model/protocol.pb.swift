// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Sources/Jetfire/Model/protocol.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import JetfireProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: JetfireProtobuf.ProtobufAPIVersionCheck {
  struct _2: JetfireProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct JetFireTimestamp {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unix timestamp (milliseconds)
  var value: Int64 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Int64? = nil
}

struct JetFireEventType {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0 - custom
  /// 1 - first_launch
  /// 2 - application_start
  /// 3 - application_shutdown
  /// 4 - feature_open
  /// 5 - feature_close
  /// 6 - feature_use
  /// 7 - story_open
  /// 8 - story_tap
  /// 9 - story_close
  /// 10 - push_show
  /// 11 - push_tap
  /// 12 - push_close
  /// 13 - toaster_show
  /// 14 - toaster_tap
  /// 15 - toaster_close
  /// 16 - feature_accepted
  var value: Int64 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Int64? = nil
}

struct JetFireActionType {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 1 – deeplink
  /// 2 – stories
  var value: Int64 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Int64? = nil
}

struct JetFireAnyValue {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var int: Int32 {
    get {return _int ?? 0}
    set {_int = newValue}
  }
  /// Returns true if `int` has been explicitly set.
  var hasInt: Bool {return self._int != nil}
  /// Clears the value of `int`. Subsequent reads from it will return its default value.
  mutating func clearInt() {self._int = nil}

  var long: Int64 {
    get {return _long ?? 0}
    set {_long = newValue}
  }
  /// Returns true if `long` has been explicitly set.
  var hasLong: Bool {return self._long != nil}
  /// Clears the value of `long`. Subsequent reads from it will return its default value.
  mutating func clearLong() {self._long = nil}

  var double: Double {
    get {return _double ?? 0}
    set {_double = newValue}
  }
  /// Returns true if `double` has been explicitly set.
  var hasDouble: Bool {return self._double != nil}
  /// Clears the value of `double`. Subsequent reads from it will return its default value.
  mutating func clearDouble() {self._double = nil}

  var bool: Bool {
    get {return _bool ?? false}
    set {_bool = newValue}
  }
  /// Returns true if `bool` has been explicitly set.
  var hasBool: Bool {return self._bool != nil}
  /// Clears the value of `bool`. Subsequent reads from it will return its default value.
  mutating func clearBool() {self._bool = nil}

  var string: String {
    get {return _string ?? String()}
    set {_string = newValue}
  }
  /// Returns true if `string` has been explicitly set.
  var hasString: Bool {return self._string != nil}
  /// Clears the value of `string`. Subsequent reads from it will return its default value.
  mutating func clearString() {self._string = nil}

  var json: String {
    get {return _json ?? String()}
    set {_json = newValue}
  }
  /// Returns true if `json` has been explicitly set.
  var hasJson: Bool {return self._json != nil}
  /// Clears the value of `json`. Subsequent reads from it will return its default value.
  mutating func clearJson() {self._json = nil}

  var bytes: Data {
    get {return _bytes ?? JetfireProtobuf.Internal.emptyData}
    set {_bytes = newValue}
  }
  /// Returns true if `bytes` has been explicitly set.
  var hasBytes: Bool {return self._bytes != nil}
  /// Clears the value of `bytes`. Subsequent reads from it will return its default value.
  mutating func clearBytes() {self._bytes = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _int: Int32? = nil
  fileprivate var _long: Int64? = nil
  fileprivate var _double: Double? = nil
  fileprivate var _bool: Bool? = nil
  fileprivate var _string: String? = nil
  fileprivate var _json: String? = nil
  fileprivate var _bytes: Data? = nil
}

struct JetFireLocation {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lat: Double {
    get {return _lat ?? 0}
    set {_lat = newValue}
  }
  /// Returns true if `lat` has been explicitly set.
  var hasLat: Bool {return self._lat != nil}
  /// Clears the value of `lat`. Subsequent reads from it will return its default value.
  mutating func clearLat() {self._lat = nil}

  var lon: Double {
    get {return _lon ?? 0}
    set {_lon = newValue}
  }
  /// Returns true if `lon` has been explicitly set.
  var hasLon: Bool {return self._lon != nil}
  /// Clears the value of `lon`. Subsequent reads from it will return its default value.
  mutating func clearLon() {self._lon = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lat: Double? = nil
  fileprivate var _lon: Double? = nil
}

struct JetFireScreen {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: Int32 {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var height: Int32 {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  mutating func clearHeight() {self._height = nil}

  var dpi: Int32 {
    get {return _dpi ?? 0}
    set {_dpi = newValue}
  }
  /// Returns true if `dpi` has been explicitly set.
  var hasDpi: Bool {return self._dpi != nil}
  /// Clears the value of `dpi`. Subsequent reads from it will return its default value.
  mutating func clearDpi() {self._dpi = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _width: Int32? = nil
  fileprivate var _height: Int32? = nil
  fileprivate var _dpi: Int32? = nil
}

struct JetFireProperty {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var value: JetFireAnyValue {
    get {return _storage._value ?? JetFireAnyValue()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {_uniqueStorage()._value = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireImage {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var previewURL: String {
    get {return _previewURL ?? String()}
    set {_previewURL = newValue}
  }
  /// Returns true if `previewURL` has been explicitly set.
  var hasPreviewURL: Bool {return self._previewURL != nil}
  /// Clears the value of `previewURL`. Subsequent reads from it will return its default value.
  mutating func clearPreviewURL() {self._previewURL = nil}

  /// base url, url for other screens will be down there
  var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {self._url = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _previewURL: String? = nil
  fileprivate var _url: String? = nil
}

struct JetFireAction {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: JetFireActionType {
    get {return _storage._type ?? JetFireActionType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  var deeplink: String {
    get {return _storage._deeplink ?? String()}
    set {_uniqueStorage()._deeplink = newValue}
  }
  /// Returns true if `deeplink` has been explicitly set.
  var hasDeeplink: Bool {return _storage._deeplink != nil}
  /// Clears the value of `deeplink`. Subsequent reads from it will return its default value.
  mutating func clearDeeplink() {_uniqueStorage()._deeplink = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireSchedule {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var atTime: JetFireTimestamp {
    get {return _storage._atTime ?? JetFireTimestamp()}
    set {_uniqueStorage()._atTime = newValue}
  }
  /// Returns true if `atTime` has been explicitly set.
  var hasAtTime: Bool {return _storage._atTime != nil}
  /// Clears the value of `atTime`. Subsequent reads from it will return its default value.
  mutating func clearAtTime() {_uniqueStorage()._atTime = nil}

  /// seconds
  var after: Int64 {
    get {return _storage._after ?? 0}
    set {_uniqueStorage()._after = newValue}
  }
  /// Returns true if `after` has been explicitly set.
  var hasAfter: Bool {return _storage._after != nil}
  /// Clears the value of `after`. Subsequent reads from it will return its default value.
  mutating func clearAfter() {_uniqueStorage()._after = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFirePropertySet {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var value: JetFireAnyValue {
    get {return _storage._value ?? JetFireAnyValue()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {_uniqueStorage()._value = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFirePropertyRemove {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
}

struct JetFirePropertyIncrement {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var increment: Double {
    get {return _increment ?? 0}
    set {_increment = newValue}
  }
  /// Returns true if `increment` has been explicitly set.
  var hasIncrement: Bool {return self._increment != nil}
  /// Clears the value of `increment`. Subsequent reads from it will return its default value.
  mutating func clearIncrement() {self._increment = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _increment: Double? = nil
}

struct JetFirePropertyDecrement {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var decrement: Double {
    get {return _decrement ?? 0}
    set {_decrement = newValue}
  }
  /// Returns true if `decrement` has been explicitly set.
  var hasDecrement: Bool {return self._decrement != nil}
  /// Clears the value of `decrement`. Subsequent reads from it will return its default value.
  mutating func clearDecrement() {self._decrement = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _decrement: Double? = nil
}

struct JetFirePropertyOperation {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: OneOf_Operation? {
    get {return _storage._operation}
    set {_uniqueStorage()._operation = newValue}
  }

  var set: JetFirePropertySet {
    get {
      if case .set(let v)? = _storage._operation {return v}
      return JetFirePropertySet()
    }
    set {_uniqueStorage()._operation = .set(newValue)}
  }

  var remove: JetFirePropertyRemove {
    get {
      if case .remove(let v)? = _storage._operation {return v}
      return JetFirePropertyRemove()
    }
    set {_uniqueStorage()._operation = .remove(newValue)}
  }

  var increment: JetFirePropertyIncrement {
    get {
      if case .increment(let v)? = _storage._operation {return v}
      return JetFirePropertyIncrement()
    }
    set {_uniqueStorage()._operation = .increment(newValue)}
  }

  var decrement: JetFirePropertyDecrement {
    get {
      if case .decrement(let v)? = _storage._operation {return v}
      return JetFirePropertyDecrement()
    }
    set {_uniqueStorage()._operation = .decrement(newValue)}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  enum OneOf_Operation: Equatable {
    case set(JetFirePropertySet)
    case remove(JetFirePropertyRemove)
    case increment(JetFirePropertyIncrement)
    case decrement(JetFirePropertyDecrement)

  #if !swift(>=4.1)
    static func ==(lhs: JetFirePropertyOperation.OneOf_Operation, rhs: JetFirePropertyOperation.OneOf_Operation) -> Bool {
      switch (lhs, rhs) {
      case (.set(let l), .set(let r)): return l == r
      case (.remove(let l), .remove(let r)): return l == r
      case (.increment(let l), .increment(let r)): return l == r
      case (.decrement(let l), .decrement(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireApp {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: String? = nil
}

struct JetFireSdk {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: String? = nil
}

struct JetFireDevice {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ios, android
  var platform: String {
    get {return _storage._platform ?? String()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  /// apple
  var vendor: String {
    get {return _storage._vendor ?? String()}
    set {_uniqueStorage()._vendor = newValue}
  }
  /// Returns true if `vendor` has been explicitly set.
  var hasVendor: Bool {return _storage._vendor != nil}
  /// Clears the value of `vendor`. Subsequent reads from it will return its default value.
  mutating func clearVendor() {_uniqueStorage()._vendor = nil}

  /// iphone,13
  var model: String {
    get {return _storage._model ?? String()}
    set {_uniqueStorage()._model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return _storage._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {_uniqueStorage()._model = nil}

  /// ios
  var os: String {
    get {return _storage._os ?? String()}
    set {_uniqueStorage()._os = newValue}
  }
  /// Returns true if `os` has been explicitly set.
  var hasOs: Bool {return _storage._os != nil}
  /// Clears the value of `os`. Subsequent reads from it will return its default value.
  mutating func clearOs() {_uniqueStorage()._os = nil}

  /// 14.1.1
  var osVersion: String {
    get {return _storage._osVersion ?? String()}
    set {_uniqueStorage()._osVersion = newValue}
  }
  /// Returns true if `osVersion` has been explicitly set.
  var hasOsVersion: Bool {return _storage._osVersion != nil}
  /// Clears the value of `osVersion`. Subsequent reads from it will return its default value.
  mutating func clearOsVersion() {_uniqueStorage()._osVersion = nil}

  /// for android
  var firmware: String {
    get {return _storage._firmware ?? String()}
    set {_uniqueStorage()._firmware = newValue}
  }
  /// Returns true if `firmware` has been explicitly set.
  var hasFirmware: Bool {return _storage._firmware != nil}
  /// Clears the value of `firmware`. Subsequent reads from it will return its default value.
  mutating func clearFirmware() {_uniqueStorage()._firmware = nil}

  /// ru
  var language: String {
    get {return _storage._language ?? String()}
    set {_uniqueStorage()._language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return _storage._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {_uniqueStorage()._language = nil}

  /// ru_RU
  var locale: String {
    get {return _storage._locale ?? String()}
    set {_uniqueStorage()._locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  var hasLocale: Bool {return _storage._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  mutating func clearLocale() {_uniqueStorage()._locale = nil}

  /// Europe/Moscow
  var timeZone: String {
    get {return _storage._timeZone ?? String()}
    set {_uniqueStorage()._timeZone = newValue}
  }
  /// Returns true if `timeZone` has been explicitly set.
  var hasTimeZone: Bool {return _storage._timeZone != nil}
  /// Clears the value of `timeZone`. Subsequent reads from it will return its default value.
  mutating func clearTimeZone() {_uniqueStorage()._timeZone = nil}

  var carrier: [String] {
    get {return _storage._carrier}
    set {_uniqueStorage()._carrier = newValue}
  }

  var screen: JetFireScreen {
    get {return _storage._screen ?? JetFireScreen()}
    set {_uniqueStorage()._screen = newValue}
  }
  /// Returns true if `screen` has been explicitly set.
  var hasScreen: Bool {return _storage._screen != nil}
  /// Clears the value of `screen`. Subsequent reads from it will return its default value.
  mutating func clearScreen() {_uniqueStorage()._screen = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireRequestUser {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: String? = nil
}

struct JetFireUser {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var properties: [JetFireProperty] = []

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: String? = nil
}

struct JetFireRequestSession {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: String? = nil
}

struct JetFireSession {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _storage._uuid ?? String()}
    set {_uniqueStorage()._uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return _storage._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {_uniqueStorage()._uuid = nil}

  /// milliseconds
  var timestamp: JetFireTimestamp {
    get {return _storage._timestamp ?? JetFireTimestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var app: JetFireApp {
    get {return _storage._app ?? JetFireApp()}
    set {_uniqueStorage()._app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  var hasApp: Bool {return _storage._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  mutating func clearApp() {_uniqueStorage()._app = nil}

  var sdk: JetFireSdk {
    get {return _storage._sdk ?? JetFireSdk()}
    set {_uniqueStorage()._sdk = newValue}
  }
  /// Returns true if `sdk` has been explicitly set.
  var hasSdk: Bool {return _storage._sdk != nil}
  /// Clears the value of `sdk`. Subsequent reads from it will return its default value.
  mutating func clearSdk() {_uniqueStorage()._sdk = nil}

  var device: JetFireDevice {
    get {return _storage._device ?? JetFireDevice()}
    set {_uniqueStorage()._device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return _storage._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {_uniqueStorage()._device = nil}

  var location: JetFireLocation {
    get {return _storage._location ?? JetFireLocation()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var properties: [JetFireProperty] {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeaturesSql {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stories: String {
    get {return _stories ?? String()}
    set {_stories = newValue}
  }
  /// Returns true if `stories` has been explicitly set.
  var hasStories: Bool {return self._stories != nil}
  /// Clears the value of `stories`. Subsequent reads from it will return its default value.
  mutating func clearStories() {self._stories = nil}

  var trigger: String {
    get {return _trigger ?? String()}
    set {_trigger = newValue}
  }
  /// Returns true if `trigger` has been explicitly set.
  var hasTrigger: Bool {return self._trigger != nil}
  /// Clears the value of `trigger`. Subsequent reads from it will return its default value.
  mutating func clearTrigger() {self._trigger = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stories: String? = nil
  fileprivate var _trigger: String? = nil
}

struct JetFireFeatureButton {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var action: JetFireAction {
    get {return _storage._action ?? JetFireAction()}
    set {_uniqueStorage()._action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {_uniqueStorage()._action = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeaturePush {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var subtitle: String {
    get {return _storage._subtitle ?? String()}
    set {_uniqueStorage()._subtitle = newValue}
  }
  /// Returns true if `subtitle` has been explicitly set.
  var hasSubtitle: Bool {return _storage._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
  mutating func clearSubtitle() {_uniqueStorage()._subtitle = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var image: JetFireImage {
    get {return _storage._image ?? JetFireImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var actionButton: JetFireFeatureButton {
    get {return _storage._actionButton ?? JetFireFeatureButton()}
    set {_uniqueStorage()._actionButton = newValue}
  }
  /// Returns true if `actionButton` has been explicitly set.
  var hasActionButton: Bool {return _storage._actionButton != nil}
  /// Clears the value of `actionButton`. Subsequent reads from it will return its default value.
  mutating func clearActionButton() {_uniqueStorage()._actionButton = nil}

  var schedule: JetFireSchedule {
    get {return _storage._schedule ?? JetFireSchedule()}
    set {_uniqueStorage()._schedule = newValue}
  }
  /// Returns true if `schedule` has been explicitly set.
  var hasSchedule: Bool {return _storage._schedule != nil}
  /// Clears the value of `schedule`. Subsequent reads from it will return its default value.
  mutating func clearSchedule() {_uniqueStorage()._schedule = nil}

  var expire: JetFireSchedule {
    get {return _storage._expire ?? JetFireSchedule()}
    set {_uniqueStorage()._expire = newValue}
  }
  /// Returns true if `expire` has been explicitly set.
  var hasExpire: Bool {return _storage._expire != nil}
  /// Clears the value of `expire`. Subsequent reads from it will return its default value.
  mutating func clearExpire() {_uniqueStorage()._expire = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeatureToaster {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var subtitle: String {
    get {return _storage._subtitle ?? String()}
    set {_uniqueStorage()._subtitle = newValue}
  }
  /// Returns true if `subtitle` has been explicitly set.
  var hasSubtitle: Bool {return _storage._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
  mutating func clearSubtitle() {_uniqueStorage()._subtitle = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var image: JetFireImage {
    get {return _storage._image ?? JetFireImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var actionButton: JetFireFeatureButton {
    get {return _storage._actionButton ?? JetFireFeatureButton()}
    set {_uniqueStorage()._actionButton = newValue}
  }
  /// Returns true if `actionButton` has been explicitly set.
  var hasActionButton: Bool {return _storage._actionButton != nil}
  /// Clears the value of `actionButton`. Subsequent reads from it will return its default value.
  mutating func clearActionButton() {_uniqueStorage()._actionButton = nil}

  var hideButton: JetFireFeatureButton {
    get {return _storage._hideButton ?? JetFireFeatureButton()}
    set {_uniqueStorage()._hideButton = newValue}
  }
  /// Returns true if `hideButton` has been explicitly set.
  var hasHideButton: Bool {return _storage._hideButton != nil}
  /// Clears the value of `hideButton`. Subsequent reads from it will return its default value.
  mutating func clearHideButton() {_uniqueStorage()._hideButton = nil}

  var schedule: JetFireSchedule {
    get {return _storage._schedule ?? JetFireSchedule()}
    set {_uniqueStorage()._schedule = newValue}
  }
  /// Returns true if `schedule` has been explicitly set.
  var hasSchedule: Bool {return _storage._schedule != nil}
  /// Clears the value of `schedule`. Subsequent reads from it will return its default value.
  mutating func clearSchedule() {_uniqueStorage()._schedule = nil}

  var expire: JetFireSchedule {
    get {return _storage._expire ?? JetFireSchedule()}
    set {_uniqueStorage()._expire = newValue}
  }
  /// Returns true if `expire` has been explicitly set.
  var hasExpire: Bool {return _storage._expire != nil}
  /// Clears the value of `expire`. Subsequent reads from it will return its default value.
  mutating func clearExpire() {_uniqueStorage()._expire = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeatureStoryFrameBackground {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: String {
    get {return _color ?? String()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: String? = nil
}

struct JetFireFeatureStoryFrameFont {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: String {
    get {return _color ?? String()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: String? = nil
}

struct JetFireFeatureStoryCover {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var image: JetFireImage {
    get {return _storage._image ?? JetFireImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeatureStorySettings {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var alwaysRewind: Bool {
    get {return _alwaysRewind ?? false}
    set {_alwaysRewind = newValue}
  }
  /// Returns true if `alwaysRewind` has been explicitly set.
  var hasAlwaysRewind: Bool {return self._alwaysRewind != nil}
  /// Clears the value of `alwaysRewind`. Subsequent reads from it will return its default value.
  mutating func clearAlwaysRewind() {self._alwaysRewind = nil}

  /// seconds
  var afterReadExpire: Int64 {
    get {return _afterReadExpire ?? 0}
    set {_afterReadExpire = newValue}
  }
  /// Returns true if `afterReadExpire` has been explicitly set.
  var hasAfterReadExpire: Bool {return self._afterReadExpire != nil}
  /// Clears the value of `afterReadExpire`. Subsequent reads from it will return its default value.
  mutating func clearAfterReadExpire() {self._afterReadExpire = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _alwaysRewind: Bool? = nil
  fileprivate var _afterReadExpire: Int64? = nil
}

struct JetFireFeatureStoryFrame {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var subtitle: String {
    get {return _storage._subtitle ?? String()}
    set {_uniqueStorage()._subtitle = newValue}
  }
  /// Returns true if `subtitle` has been explicitly set.
  var hasSubtitle: Bool {return _storage._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
  mutating func clearSubtitle() {_uniqueStorage()._subtitle = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var image: JetFireImage {
    get {return _storage._image ?? JetFireImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var background: JetFireFeatureStoryFrameBackground {
    get {return _storage._background ?? JetFireFeatureStoryFrameBackground()}
    set {_uniqueStorage()._background = newValue}
  }
  /// Returns true if `background` has been explicitly set.
  var hasBackground: Bool {return _storage._background != nil}
  /// Clears the value of `background`. Subsequent reads from it will return its default value.
  mutating func clearBackground() {_uniqueStorage()._background = nil}

  var font: JetFireFeatureStoryFrameFont {
    get {return _storage._font ?? JetFireFeatureStoryFrameFont()}
    set {_uniqueStorage()._font = newValue}
  }
  /// Returns true if `font` has been explicitly set.
  var hasFont: Bool {return _storage._font != nil}
  /// Clears the value of `font`. Subsequent reads from it will return its default value.
  mutating func clearFont() {_uniqueStorage()._font = nil}

  var actionButton: JetFireFeatureButton {
    get {return _storage._actionButton ?? JetFireFeatureButton()}
    set {_uniqueStorage()._actionButton = newValue}
  }
  /// Returns true if `actionButton` has been explicitly set.
  var hasActionButton: Bool {return _storage._actionButton != nil}
  /// Clears the value of `actionButton`. Subsequent reads from it will return its default value.
  mutating func clearActionButton() {_uniqueStorage()._actionButton = nil}

  var hideButton: JetFireFeatureButton {
    get {return _storage._hideButton ?? JetFireFeatureButton()}
    set {_uniqueStorage()._hideButton = newValue}
  }
  /// Returns true if `hideButton` has been explicitly set.
  var hasHideButton: Bool {return _storage._hideButton != nil}
  /// Clears the value of `hideButton`. Subsequent reads from it will return its default value.
  mutating func clearHideButton() {_uniqueStorage()._hideButton = nil}

  var duration: Double {
    get {return _storage._duration ?? 0}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_uniqueStorage()._duration = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeatureStory {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var cover: JetFireFeatureStoryCover {
    get {return _storage._cover ?? JetFireFeatureStoryCover()}
    set {_uniqueStorage()._cover = newValue}
  }
  /// Returns true if `cover` has been explicitly set.
  var hasCover: Bool {return _storage._cover != nil}
  /// Clears the value of `cover`. Subsequent reads from it will return its default value.
  mutating func clearCover() {_uniqueStorage()._cover = nil}

  var frames: [JetFireFeatureStoryFrame] {
    get {return _storage._frames}
    set {_uniqueStorage()._frames = newValue}
  }

  var schedule: JetFireSchedule {
    get {return _storage._schedule ?? JetFireSchedule()}
    set {_uniqueStorage()._schedule = newValue}
  }
  /// Returns true if `schedule` has been explicitly set.
  var hasSchedule: Bool {return _storage._schedule != nil}
  /// Clears the value of `schedule`. Subsequent reads from it will return its default value.
  mutating func clearSchedule() {_uniqueStorage()._schedule = nil}

  var expire: JetFireSchedule {
    get {return _storage._expire ?? JetFireSchedule()}
    set {_uniqueStorage()._expire = newValue}
  }
  /// Returns true if `expire` has been explicitly set.
  var hasExpire: Bool {return _storage._expire != nil}
  /// Clears the value of `expire`. Subsequent reads from it will return its default value.
  mutating func clearExpire() {_uniqueStorage()._expire = nil}

  var settings: JetFireFeatureStorySettings {
    get {return _storage._settings ?? JetFireFeatureStorySettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  mutating func clearSettings() {_uniqueStorage()._settings = nil}

  var priority: Int64 {
    get {return _storage._priority ?? 0}
    set {_uniqueStorage()._priority = newValue}
  }
  /// Returns true if `priority` has been explicitly set.
  var hasPriority: Bool {return _storage._priority != nil}
  /// Clears the value of `priority`. Subsequent reads from it will return its default value.
  mutating func clearPriority() {_uniqueStorage()._priority = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireFeatureData {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data {
    get {return _storage._data ?? JetfireProtobuf.Internal.emptyData}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {_uniqueStorage()._data = nil}

  var schedule: JetFireSchedule {
    get {return _storage._schedule ?? JetFireSchedule()}
    set {_uniqueStorage()._schedule = newValue}
  }
  /// Returns true if `schedule` has been explicitly set.
  var hasSchedule: Bool {return _storage._schedule != nil}
  /// Clears the value of `schedule`. Subsequent reads from it will return its default value.
  mutating func clearSchedule() {_uniqueStorage()._schedule = nil}

  var expire: JetFireSchedule {
    get {return _storage._expire ?? JetFireSchedule()}
    set {_uniqueStorage()._expire = newValue}
  }
  /// Returns true if `expire` has been explicitly set.
  var hasExpire: Bool {return _storage._expire != nil}
  /// Clears the value of `expire`. Subsequent reads from it will return its default value.
  mutating func clearExpire() {_uniqueStorage()._expire = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireEvent {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _storage._uuid ?? String()}
    set {_uniqueStorage()._uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return _storage._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {_uniqueStorage()._uuid = nil}

  /// milliseconds
  var timestamp: JetFireTimestamp {
    get {return _storage._timestamp ?? JetFireTimestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var eventType: JetFireEventType {
    get {return _storage._eventType ?? JetFireEventType()}
    set {_uniqueStorage()._eventType = newValue}
  }
  /// Returns true if `eventType` has been explicitly set.
  var hasEventType: Bool {return _storage._eventType != nil}
  /// Clears the value of `eventType`. Subsequent reads from it will return its default value.
  mutating func clearEventType() {_uniqueStorage()._eventType = nil}

  var customEvent: String {
    get {return _storage._customEvent ?? String()}
    set {_uniqueStorage()._customEvent = newValue}
  }
  /// Returns true if `customEvent` has been explicitly set.
  var hasCustomEvent: Bool {return _storage._customEvent != nil}
  /// Clears the value of `customEvent`. Subsequent reads from it will return its default value.
  mutating func clearCustomEvent() {_uniqueStorage()._customEvent = nil}

  var feature: String {
    get {return _storage._feature ?? String()}
    set {_uniqueStorage()._feature = newValue}
  }
  /// Returns true if `feature` has been explicitly set.
  var hasFeature: Bool {return _storage._feature != nil}
  /// Clears the value of `feature`. Subsequent reads from it will return its default value.
  mutating func clearFeature() {_uniqueStorage()._feature = nil}

  var campaignID: Int64 {
    get {return _storage._campaignID ?? 0}
    set {_uniqueStorage()._campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return _storage._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {_uniqueStorage()._campaignID = nil}

  /// story_id, ...
  var entityID: Int64 {
    get {return _storage._entityID ?? 0}
    set {_uniqueStorage()._entityID = newValue}
  }
  /// Returns true if `entityID` has been explicitly set.
  var hasEntityID: Bool {return _storage._entityID != nil}
  /// Clears the value of `entityID`. Subsequent reads from it will return its default value.
  mutating func clearEntityID() {_uniqueStorage()._entityID = nil}

  var properties: [JetFireProperty] {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireCampaign {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var push: JetFireFeaturePush {
    get {return _storage._push ?? JetFireFeaturePush()}
    set {_uniqueStorage()._push = newValue}
  }
  /// Returns true if `push` has been explicitly set.
  var hasPush: Bool {return _storage._push != nil}
  /// Clears the value of `push`. Subsequent reads from it will return its default value.
  mutating func clearPush() {_uniqueStorage()._push = nil}

  var toaster: JetFireFeatureToaster {
    get {return _storage._toaster ?? JetFireFeatureToaster()}
    set {_uniqueStorage()._toaster = newValue}
  }
  /// Returns true if `toaster` has been explicitly set.
  var hasToaster: Bool {return _storage._toaster != nil}
  /// Clears the value of `toaster`. Subsequent reads from it will return its default value.
  mutating func clearToaster() {_uniqueStorage()._toaster = nil}

  var stories: [JetFireFeatureStory] {
    get {return _storage._stories}
    set {_uniqueStorage()._stories = newValue}
  }

  var data: JetFireFeatureData {
    get {return _storage._data ?? JetFireFeatureData()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {_uniqueStorage()._data = nil}

  var priority: Int32 {
    get {return _storage._priority ?? 0}
    set {_uniqueStorage()._priority = newValue}
  }
  /// Returns true if `priority` has been explicitly set.
  var hasPriority: Bool {return _storage._priority != nil}
  /// Clears the value of `priority`. Subsequent reads from it will return its default value.
  mutating func clearPriority() {_uniqueStorage()._priority = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireListCampaignsRequest {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: JetFireUser {
    get {return _storage._user ?? JetFireUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireSession {
    get {return _storage._session ?? JetFireSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireUpdateUserProperties {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: JetFireRequestUser {
    get {return _storage._user ?? JetFireRequestUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireRequestSession {
    get {return _storage._session ?? JetFireRequestSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var propertyOperations: [JetFirePropertyOperation] {
    get {return _storage._propertyOperations}
    set {_uniqueStorage()._propertyOperations = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireUpdateSessionProperties {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: JetFireRequestUser {
    get {return _storage._user ?? JetFireRequestUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireRequestSession {
    get {return _storage._session ?? JetFireRequestSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var propertyOperations: [JetFirePropertyOperation] {
    get {return _storage._propertyOperations}
    set {_uniqueStorage()._propertyOperations = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireRegisterEventsRequest {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: JetFireRequestUser {
    get {return _storage._user ?? JetFireRequestUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireRequestSession {
    get {return _storage._session ?? JetFireRequestSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var events: [JetFireEvent] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireListCampaignsResponse {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var total: Int32 {
    get {return _storage._total ?? 0}
    set {_uniqueStorage()._total = newValue}
  }
  /// Returns true if `total` has been explicitly set.
  var hasTotal: Bool {return _storage._total != nil}
  /// Clears the value of `total`. Subsequent reads from it will return its default value.
  mutating func clearTotal() {_uniqueStorage()._total = nil}

  var campaigns: [JetFireCampaign] {
    get {return _storage._campaigns}
    set {_uniqueStorage()._campaigns = newValue}
  }

  var sql: JetFireFeaturesSql {
    get {return _storage._sql ?? JetFireFeaturesSql()}
    set {_uniqueStorage()._sql = newValue}
  }
  /// Returns true if `sql` has been explicitly set.
  var hasSql: Bool {return _storage._sql != nil}
  /// Clears the value of `sql`. Subsequent reads from it will return its default value.
  mutating func clearSql() {_uniqueStorage()._sql = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireOkResponse {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
}

struct JetFireErrorResponse {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var systemMessage: String {
    get {return _systemMessage ?? String()}
    set {_systemMessage = newValue}
  }
  /// Returns true if `systemMessage` has been explicitly set.
  var hasSystemMessage: Bool {return self._systemMessage != nil}
  /// Clears the value of `systemMessage`. Subsequent reads from it will return its default value.
  mutating func clearSystemMessage() {self._systemMessage = nil}

  var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
  fileprivate var _systemMessage: String? = nil
  fileprivate var _type: String? = nil
}

struct JetFireJwt {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String {
    get {return _token ?? String()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _token: String? = nil
}

struct JetFireRequest {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ip: String {
    get {return _ip ?? String()}
    set {_ip = newValue}
  }
  /// Returns true if `ip` has been explicitly set.
  var hasIp: Bool {return self._ip != nil}
  /// Clears the value of `ip`. Subsequent reads from it will return its default value.
  mutating func clearIp() {self._ip = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ip: String? = nil
}

struct JetFireRegisterUserAndSessionMessage {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: JetFireJwt {
    get {return _storage._jwt ?? JetFireJwt()}
    set {_uniqueStorage()._jwt = newValue}
  }
  /// Returns true if `jwt` has been explicitly set.
  var hasJwt: Bool {return _storage._jwt != nil}
  /// Clears the value of `jwt`. Subsequent reads from it will return its default value.
  mutating func clearJwt() {_uniqueStorage()._jwt = nil}

  var salt: String {
    get {return _storage._salt ?? String()}
    set {_uniqueStorage()._salt = newValue}
  }
  /// Returns true if `salt` has been explicitly set.
  var hasSalt: Bool {return _storage._salt != nil}
  /// Clears the value of `salt`. Subsequent reads from it will return its default value.
  mutating func clearSalt() {_uniqueStorage()._salt = nil}

  var request: JetFireRequest {
    get {return _storage._request ?? JetFireRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  var user: JetFireUser {
    get {return _storage._user ?? JetFireUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireSession {
    get {return _storage._session ?? JetFireSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireUpdateUserPropertiesMessage {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: JetFireJwt {
    get {return _storage._jwt ?? JetFireJwt()}
    set {_uniqueStorage()._jwt = newValue}
  }
  /// Returns true if `jwt` has been explicitly set.
  var hasJwt: Bool {return _storage._jwt != nil}
  /// Clears the value of `jwt`. Subsequent reads from it will return its default value.
  mutating func clearJwt() {_uniqueStorage()._jwt = nil}

  var salt: String {
    get {return _storage._salt ?? String()}
    set {_uniqueStorage()._salt = newValue}
  }
  /// Returns true if `salt` has been explicitly set.
  var hasSalt: Bool {return _storage._salt != nil}
  /// Clears the value of `salt`. Subsequent reads from it will return its default value.
  mutating func clearSalt() {_uniqueStorage()._salt = nil}

  var request: JetFireRequest {
    get {return _storage._request ?? JetFireRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  var user: JetFireRequestUser {
    get {return _storage._user ?? JetFireRequestUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireRequestSession {
    get {return _storage._session ?? JetFireRequestSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var propertyOperations: [JetFirePropertyOperation] {
    get {return _storage._propertyOperations}
    set {_uniqueStorage()._propertyOperations = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireUpdateSessionPropertiesMessage {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: JetFireJwt {
    get {return _storage._jwt ?? JetFireJwt()}
    set {_uniqueStorage()._jwt = newValue}
  }
  /// Returns true if `jwt` has been explicitly set.
  var hasJwt: Bool {return _storage._jwt != nil}
  /// Clears the value of `jwt`. Subsequent reads from it will return its default value.
  mutating func clearJwt() {_uniqueStorage()._jwt = nil}

  var salt: String {
    get {return _storage._salt ?? String()}
    set {_uniqueStorage()._salt = newValue}
  }
  /// Returns true if `salt` has been explicitly set.
  var hasSalt: Bool {return _storage._salt != nil}
  /// Clears the value of `salt`. Subsequent reads from it will return its default value.
  mutating func clearSalt() {_uniqueStorage()._salt = nil}

  var request: JetFireRequest {
    get {return _storage._request ?? JetFireRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  var user: JetFireRequestUser {
    get {return _storage._user ?? JetFireRequestUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireRequestSession {
    get {return _storage._session ?? JetFireRequestSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var propertyOperations: [JetFirePropertyOperation] {
    get {return _storage._propertyOperations}
    set {_uniqueStorage()._propertyOperations = newValue}
  }

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct JetFireEventMessage {
  // JetfireProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: JetFireJwt {
    get {return _storage._jwt ?? JetFireJwt()}
    set {_uniqueStorage()._jwt = newValue}
  }
  /// Returns true if `jwt` has been explicitly set.
  var hasJwt: Bool {return _storage._jwt != nil}
  /// Clears the value of `jwt`. Subsequent reads from it will return its default value.
  mutating func clearJwt() {_uniqueStorage()._jwt = nil}

  var salt: String {
    get {return _storage._salt ?? String()}
    set {_uniqueStorage()._salt = newValue}
  }
  /// Returns true if `salt` has been explicitly set.
  var hasSalt: Bool {return _storage._salt != nil}
  /// Clears the value of `salt`. Subsequent reads from it will return its default value.
  mutating func clearSalt() {_uniqueStorage()._salt = nil}

  var request: JetFireRequest {
    get {return _storage._request ?? JetFireRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  var user: JetFireRequestUser {
    get {return _storage._user ?? JetFireRequestUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var session: JetFireRequestSession {
    get {return _storage._session ?? JetFireRequestSession()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {_uniqueStorage()._session = nil}

  var event: JetFireEvent {
    get {return _storage._event ?? JetFireEvent()}
    set {_uniqueStorage()._event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return _storage._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {_uniqueStorage()._event = nil}

  var unknownFields = JetfireProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension JetFireTimestamp: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Timestamp"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireTimestamp, rhs: JetFireTimestamp) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireEventType: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventType"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireEventType, rhs: JetFireEventType) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireActionType: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ActionType"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireActionType, rhs: JetFireActionType) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireAnyValue: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AnyValue"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    101: .same(proto: "int"),
    102: .same(proto: "long"),
    103: .same(proto: "double"),
    104: .same(proto: "bool"),
    105: .same(proto: "string"),
    106: .same(proto: "json"),
    107: .same(proto: "bytes"),
  ]

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 101: try decoder.decodeSingularInt32Field(value: &self._int)
      case 102: try decoder.decodeSingularInt64Field(value: &self._long)
      case 103: try decoder.decodeSingularDoubleField(value: &self._double)
      case 104: try decoder.decodeSingularBoolField(value: &self._bool)
      case 105: try decoder.decodeSingularStringField(value: &self._string)
      case 106: try decoder.decodeSingularStringField(value: &self._json)
      case 107: try decoder.decodeSingularBytesField(value: &self._bytes)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._int {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 101)
    }
    if let v = self._long {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 102)
    }
    if let v = self._double {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 103)
    }
    if let v = self._bool {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 104)
    }
    if let v = self._string {
      try visitor.visitSingularStringField(value: v, fieldNumber: 105)
    }
    if let v = self._json {
      try visitor.visitSingularStringField(value: v, fieldNumber: 106)
    }
    if let v = self._bytes {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 107)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireAnyValue, rhs: JetFireAnyValue) -> Bool {
    if lhs._int != rhs._int {return false}
    if lhs._long != rhs._long {return false}
    if lhs._double != rhs._double {return false}
    if lhs._bool != rhs._bool {return false}
    if lhs._string != rhs._string {return false}
    if lhs._json != rhs._json {return false}
    if lhs._bytes != rhs._bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireLocation: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Location"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "lon"),
  ]

  public var isInitialized: Bool {
    if self._lat == nil {return false}
    if self._lon == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._lat)
      case 2: try decoder.decodeSingularDoubleField(value: &self._lon)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lat {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._lon {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireLocation, rhs: JetFireLocation) -> Bool {
    if lhs._lat != rhs._lat {return false}
    if lhs._lon != rhs._lon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireScreen: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Screen"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
    3: .same(proto: "dpi"),
  ]

  public var isInitialized: Bool {
    if self._width == nil {return false}
    if self._height == nil {return false}
    if self._dpi == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._width)
      case 2: try decoder.decodeSingularInt32Field(value: &self._height)
      case 3: try decoder.decodeSingularInt32Field(value: &self._dpi)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._width {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._height {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._dpi {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireScreen, rhs: JetFireScreen) -> Bool {
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs._dpi != rhs._dpi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireProperty: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Property"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _value: JetFireAnyValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._name == nil {return false}
      if _storage._value == nil {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireProperty, rhs: JetFireProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireImage: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Image"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .standard(proto: "preview_url"),
    2: .same(proto: "url"),
  ]

  public var isInitialized: Bool {
    if self._url == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._previewURL)
      case 2: try decoder.decodeSingularStringField(value: &self._url)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._previewURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireImage, rhs: JetFireImage) -> Bool {
    if lhs._previewURL != rhs._previewURL {return false}
    if lhs._url != rhs._url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireAction: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Action"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "deeplink"),
  ]

  fileprivate class _StorageClass {
    var _type: JetFireActionType? = nil
    var _deeplink: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _deeplink = source._deeplink
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type == nil {return false}
      if let v = _storage._type, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._deeplink)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._deeplink {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireAction, rhs: JetFireAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._deeplink != rhs_storage._deeplink {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireSchedule: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Schedule"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .standard(proto: "at_time"),
    2: .same(proto: "after"),
  ]

  fileprivate class _StorageClass {
    var _atTime: JetFireTimestamp? = nil
    var _after: Int64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _atTime = source._atTime
      _after = source._after
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._atTime, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._atTime)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._after)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._atTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._after {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireSchedule, rhs: JetFireSchedule) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._atTime != rhs_storage._atTime {return false}
        if _storage._after != rhs_storage._after {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFirePropertySet: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertySet"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _value: JetFireAnyValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._name == nil {return false}
      if _storage._value == nil {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFirePropertySet, rhs: JetFirePropertySet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFirePropertyRemove: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertyRemove"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFirePropertyRemove, rhs: JetFirePropertyRemove) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFirePropertyIncrement: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertyIncrement"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "increment"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._increment == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularDoubleField(value: &self._increment)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._increment {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFirePropertyIncrement, rhs: JetFirePropertyIncrement) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._increment != rhs._increment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFirePropertyDecrement: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertyDecrement"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "decrement"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._decrement == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularDoubleField(value: &self._decrement)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._decrement {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFirePropertyDecrement, rhs: JetFirePropertyDecrement) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._decrement != rhs._decrement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFirePropertyOperation: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertyOperation"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "set"),
    3: .same(proto: "remove"),
    4: .same(proto: "increment"),
    5: .same(proto: "decrement"),
  ]

  fileprivate class _StorageClass {
    var _operation: JetFirePropertyOperation.OneOf_Operation?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._operation {
      case .set(let v)?: if !v.isInitialized {return false}
      case .remove(let v)?: if !v.isInitialized {return false}
      case .increment(let v)?: if !v.isInitialized {return false}
      case .decrement(let v)?: if !v.isInitialized {return false}
      default: break
      }
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: JetFirePropertySet?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .set(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .set(v)}
        case 3:
          var v: JetFirePropertyRemove?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .remove(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .remove(v)}
        case 4:
          var v: JetFirePropertyIncrement?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .increment(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .increment(v)}
        case 5:
          var v: JetFirePropertyDecrement?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .decrement(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .decrement(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._operation {
      case .set(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .remove(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .increment(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .decrement(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFirePropertyOperation, rhs: JetFirePropertyOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireApp: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "App"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "version"),
  ]

  public var isInitialized: Bool {
    if self._version == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._version)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireApp, rhs: JetFireApp) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireSdk: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Sdk"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "version"),
  ]

  public var isInitialized: Bool {
    if self._version == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._version)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireSdk, rhs: JetFireSdk) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireDevice: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Device"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "platform"),
    3: .same(proto: "vendor"),
    4: .same(proto: "model"),
    5: .same(proto: "os"),
    6: .standard(proto: "os_version"),
    7: .same(proto: "firmware"),
    8: .same(proto: "language"),
    9: .same(proto: "locale"),
    10: .standard(proto: "time_zone"),
    11: .same(proto: "carrier"),
    12: .same(proto: "screen"),
  ]

  fileprivate class _StorageClass {
    var _platform: String? = nil
    var _vendor: String? = nil
    var _model: String? = nil
    var _os: String? = nil
    var _osVersion: String? = nil
    var _firmware: String? = nil
    var _language: String? = nil
    var _locale: String? = nil
    var _timeZone: String? = nil
    var _carrier: [String] = []
    var _screen: JetFireScreen? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _platform = source._platform
      _vendor = source._vendor
      _model = source._model
      _os = source._os
      _osVersion = source._osVersion
      _firmware = source._firmware
      _language = source._language
      _locale = source._locale
      _timeZone = source._timeZone
      _carrier = source._carrier
      _screen = source._screen
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._platform == nil {return false}
      if _storage._vendor == nil {return false}
      if _storage._model == nil {return false}
      if _storage._os == nil {return false}
      if _storage._osVersion == nil {return false}
      if _storage._language == nil {return false}
      if _storage._locale == nil {return false}
      if _storage._timeZone == nil {return false}
      if _storage._screen == nil {return false}
      if let v = _storage._screen, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._platform)
        case 3: try decoder.decodeSingularStringField(value: &_storage._vendor)
        case 4: try decoder.decodeSingularStringField(value: &_storage._model)
        case 5: try decoder.decodeSingularStringField(value: &_storage._os)
        case 6: try decoder.decodeSingularStringField(value: &_storage._osVersion)
        case 7: try decoder.decodeSingularStringField(value: &_storage._firmware)
        case 8: try decoder.decodeSingularStringField(value: &_storage._language)
        case 9: try decoder.decodeSingularStringField(value: &_storage._locale)
        case 10: try decoder.decodeSingularStringField(value: &_storage._timeZone)
        case 11: try decoder.decodeRepeatedStringField(value: &_storage._carrier)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._screen)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._platform {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._vendor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._model {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._os {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._osVersion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._firmware {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._locale {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._timeZone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if !_storage._carrier.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._carrier, fieldNumber: 11)
      }
      if let v = _storage._screen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireDevice, rhs: JetFireDevice) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._vendor != rhs_storage._vendor {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._os != rhs_storage._os {return false}
        if _storage._osVersion != rhs_storage._osVersion {return false}
        if _storage._firmware != rhs_storage._firmware {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._locale != rhs_storage._locale {return false}
        if _storage._timeZone != rhs_storage._timeZone {return false}
        if _storage._carrier != rhs_storage._carrier {return false}
        if _storage._screen != rhs_storage._screen {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireRequestUser: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RequestUser"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "uuid"),
  ]

  public var isInitialized: Bool {
    if self._uuid == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._uuid)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireRequestUser, rhs: JetFireRequestUser) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireUser: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "uuid"),
    3: .same(proto: "properties"),
  ]

  public var isInitialized: Bool {
    if self._uuid == nil {return false}
    if !JetfireProtobuf.Internal.areAllInitialized(self.properties) {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._uuid)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.properties)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.properties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.properties, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireUser, rhs: JetFireUser) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireRequestSession: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RequestSession"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "uuid"),
  ]

  public var isInitialized: Bool {
    if self._uuid == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._uuid)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireRequestSession, rhs: JetFireRequestSession) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireSession: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Session"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "uuid"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "app"),
    5: .same(proto: "sdk"),
    6: .same(proto: "device"),
    7: .same(proto: "location"),
    8: .same(proto: "properties"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String? = nil
    var _timestamp: JetFireTimestamp? = nil
    var _app: JetFireApp? = nil
    var _sdk: JetFireSdk? = nil
    var _device: JetFireDevice? = nil
    var _location: JetFireLocation? = nil
    var _properties: [JetFireProperty] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _timestamp = source._timestamp
      _app = source._app
      _sdk = source._sdk
      _device = source._device
      _location = source._location
      _properties = source._properties
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._uuid == nil {return false}
      if _storage._timestamp == nil {return false}
      if _storage._app == nil {return false}
      if _storage._sdk == nil {return false}
      if _storage._device == nil {return false}
      if let v = _storage._timestamp, !v.isInitialized {return false}
      if let v = _storage._app, !v.isInitialized {return false}
      if let v = _storage._sdk, !v.isInitialized {return false}
      if let v = _storage._device, !v.isInitialized {return false}
      if let v = _storage._location, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._properties) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._app)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._sdk)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._device)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._properties)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._uuid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._sdk {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._properties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._properties, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireSession, rhs: JetFireSession) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._app != rhs_storage._app {return false}
        if _storage._sdk != rhs_storage._sdk {return false}
        if _storage._device != rhs_storage._device {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._properties != rhs_storage._properties {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeaturesSql: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeaturesSql"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "stories"),
    3: .same(proto: "trigger"),
  ]

  public var isInitialized: Bool {
    if self._stories == nil {return false}
    if self._trigger == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._stories)
      case 3: try decoder.decodeSingularStringField(value: &self._trigger)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._stories {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._trigger {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeaturesSql, rhs: JetFireFeaturesSql) -> Bool {
    if lhs._stories != rhs._stories {return false}
    if lhs._trigger != rhs._trigger {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureButton: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureButton"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "title"),
    3: .same(proto: "action"),
  ]

  fileprivate class _StorageClass {
    var _title: String? = nil
    var _action: JetFireAction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _action = source._action
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._action, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._action)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._action {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureButton, rhs: JetFireFeatureButton) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._action != rhs_storage._action {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeaturePush: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeaturePush"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "title"),
    3: .same(proto: "subtitle"),
    4: .same(proto: "message"),
    5: .same(proto: "image"),
    6: .standard(proto: "action_button"),
    7: .same(proto: "schedule"),
    8: .same(proto: "expire"),
  ]

  fileprivate class _StorageClass {
    var _title: String? = nil
    var _subtitle: String? = nil
    var _message: String? = nil
    var _image: JetFireImage? = nil
    var _actionButton: JetFireFeatureButton? = nil
    var _schedule: JetFireSchedule? = nil
    var _expire: JetFireSchedule? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _subtitle = source._subtitle
      _message = source._message
      _image = source._image
      _actionButton = source._actionButton
      _schedule = source._schedule
      _expire = source._expire
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image, !v.isInitialized {return false}
      if let v = _storage._actionButton, !v.isInitialized {return false}
      if let v = _storage._schedule, !v.isInitialized {return false}
      if let v = _storage._expire, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._subtitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._message)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._actionButton)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._schedule)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._expire)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._subtitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._actionButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._schedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._expire {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeaturePush, rhs: JetFireFeaturePush) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._subtitle != rhs_storage._subtitle {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._actionButton != rhs_storage._actionButton {return false}
        if _storage._schedule != rhs_storage._schedule {return false}
        if _storage._expire != rhs_storage._expire {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureToaster: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureToaster"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "title"),
    3: .same(proto: "subtitle"),
    4: .same(proto: "message"),
    5: .same(proto: "image"),
    6: .standard(proto: "action_button"),
    7: .standard(proto: "hide_button"),
    8: .same(proto: "schedule"),
    9: .same(proto: "expire"),
  ]

  fileprivate class _StorageClass {
    var _title: String? = nil
    var _subtitle: String? = nil
    var _message: String? = nil
    var _image: JetFireImage? = nil
    var _actionButton: JetFireFeatureButton? = nil
    var _hideButton: JetFireFeatureButton? = nil
    var _schedule: JetFireSchedule? = nil
    var _expire: JetFireSchedule? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _subtitle = source._subtitle
      _message = source._message
      _image = source._image
      _actionButton = source._actionButton
      _hideButton = source._hideButton
      _schedule = source._schedule
      _expire = source._expire
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image, !v.isInitialized {return false}
      if let v = _storage._actionButton, !v.isInitialized {return false}
      if let v = _storage._hideButton, !v.isInitialized {return false}
      if let v = _storage._schedule, !v.isInitialized {return false}
      if let v = _storage._expire, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._subtitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._message)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._actionButton)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._hideButton)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._schedule)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._expire)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._subtitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._actionButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._hideButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._schedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._expire {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureToaster, rhs: JetFireFeatureToaster) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._subtitle != rhs_storage._subtitle {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._actionButton != rhs_storage._actionButton {return false}
        if _storage._hideButton != rhs_storage._hideButton {return false}
        if _storage._schedule != rhs_storage._schedule {return false}
        if _storage._expire != rhs_storage._expire {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureStoryFrameBackground: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureStoryFrameBackground"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureStoryFrameBackground, rhs: JetFireFeatureStoryFrameBackground) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureStoryFrameFont: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureStoryFrameFont"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureStoryFrameFont, rhs: JetFireFeatureStoryFrameFont) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureStoryCover: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureStoryCover"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "image"),
    3: .same(proto: "title"),
  ]

  fileprivate class _StorageClass {
    var _image: JetFireImage? = nil
    var _title: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _image = source._image
      _title = source._title
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 3: try decoder.decodeSingularStringField(value: &_storage._title)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureStoryCover, rhs: JetFireFeatureStoryCover) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._image != rhs_storage._image {return false}
        if _storage._title != rhs_storage._title {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureStorySettings: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureStorySettings"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .standard(proto: "always_rewind"),
    3: .standard(proto: "after_read_expire"),
  ]

  public var isInitialized: Bool {
    if self._alwaysRewind == nil {return false}
    if self._afterReadExpire == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularBoolField(value: &self._alwaysRewind)
      case 3: try decoder.decodeSingularInt64Field(value: &self._afterReadExpire)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._alwaysRewind {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._afterReadExpire {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureStorySettings, rhs: JetFireFeatureStorySettings) -> Bool {
    if lhs._alwaysRewind != rhs._alwaysRewind {return false}
    if lhs._afterReadExpire != rhs._afterReadExpire {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureStoryFrame: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureStoryFrame"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "subtitle"),
    4: .same(proto: "message"),
    5: .same(proto: "image"),
    6: .same(proto: "background"),
    7: .same(proto: "font"),
    8: .standard(proto: "action_button"),
    9: .standard(proto: "hide_button"),
    10: .same(proto: "duration"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _title: String? = nil
    var _subtitle: String? = nil
    var _message: String? = nil
    var _image: JetFireImage? = nil
    var _background: JetFireFeatureStoryFrameBackground? = nil
    var _font: JetFireFeatureStoryFrameFont? = nil
    var _actionButton: JetFireFeatureButton? = nil
    var _hideButton: JetFireFeatureButton? = nil
    var _duration: Double? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _subtitle = source._subtitle
      _message = source._message
      _image = source._image
      _background = source._background
      _font = source._font
      _actionButton = source._actionButton
      _hideButton = source._hideButton
      _duration = source._duration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._duration == nil {return false}
      if let v = _storage._image, !v.isInitialized {return false}
      if let v = _storage._actionButton, !v.isInitialized {return false}
      if let v = _storage._hideButton, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._subtitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._message)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._background)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._font)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._actionButton)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._hideButton)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._duration)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._subtitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._background {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._font {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._actionButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._hideButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._duration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureStoryFrame, rhs: JetFireFeatureStoryFrame) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._subtitle != rhs_storage._subtitle {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._background != rhs_storage._background {return false}
        if _storage._font != rhs_storage._font {return false}
        if _storage._actionButton != rhs_storage._actionButton {return false}
        if _storage._hideButton != rhs_storage._hideButton {return false}
        if _storage._duration != rhs_storage._duration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureStory: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureStory"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "cover"),
    3: .same(proto: "frames"),
    4: .same(proto: "schedule"),
    5: .same(proto: "expire"),
    6: .same(proto: "settings"),
    7: .same(proto: "priority"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _cover: JetFireFeatureStoryCover? = nil
    var _frames: [JetFireFeatureStoryFrame] = []
    var _schedule: JetFireSchedule? = nil
    var _expire: JetFireSchedule? = nil
    var _settings: JetFireFeatureStorySettings? = nil
    var _priority: Int64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _cover = source._cover
      _frames = source._frames
      _schedule = source._schedule
      _expire = source._expire
      _settings = source._settings
      _priority = source._priority
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._settings == nil {return false}
      if _storage._priority == nil {return false}
      if let v = _storage._cover, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._frames) {return false}
      if let v = _storage._schedule, !v.isInitialized {return false}
      if let v = _storage._expire, !v.isInitialized {return false}
      if let v = _storage._settings, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._cover)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._frames)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._schedule)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._expire)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._settings)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._priority)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._cover {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._frames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._frames, fieldNumber: 3)
      }
      if let v = _storage._schedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._expire {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._priority {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureStory, rhs: JetFireFeatureStory) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._frames != rhs_storage._frames {return false}
        if _storage._schedule != rhs_storage._schedule {return false}
        if _storage._expire != rhs_storage._expire {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._priority != rhs_storage._priority {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireFeatureData: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FeatureData"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "data"),
    3: .same(proto: "schedule"),
    4: .same(proto: "expire"),
  ]

  fileprivate class _StorageClass {
    var _data: Data? = nil
    var _schedule: JetFireSchedule? = nil
    var _expire: JetFireSchedule? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _schedule = source._schedule
      _expire = source._expire
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._data == nil {return false}
      if let v = _storage._schedule, !v.isInitialized {return false}
      if let v = _storage._expire, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularBytesField(value: &_storage._data)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._schedule)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._expire)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      if let v = _storage._schedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._expire {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireFeatureData, rhs: JetFireFeatureData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        if _storage._schedule != rhs_storage._schedule {return false}
        if _storage._expire != rhs_storage._expire {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireEvent: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Event"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "uuid"),
    3: .same(proto: "timestamp"),
    4: .standard(proto: "event_type"),
    5: .standard(proto: "custom_event"),
    6: .same(proto: "feature"),
    7: .standard(proto: "campaign_id"),
    8: .standard(proto: "entity_id"),
    9: .same(proto: "properties"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String? = nil
    var _timestamp: JetFireTimestamp? = nil
    var _eventType: JetFireEventType? = nil
    var _customEvent: String? = nil
    var _feature: String? = nil
    var _campaignID: Int64? = nil
    var _entityID: Int64? = nil
    var _properties: [JetFireProperty] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _timestamp = source._timestamp
      _eventType = source._eventType
      _customEvent = source._customEvent
      _feature = source._feature
      _campaignID = source._campaignID
      _entityID = source._entityID
      _properties = source._properties
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._uuid == nil {return false}
      if _storage._timestamp == nil {return false}
      if _storage._eventType == nil {return false}
      if let v = _storage._timestamp, !v.isInitialized {return false}
      if let v = _storage._eventType, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._properties) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._eventType)
        case 5: try decoder.decodeSingularStringField(value: &_storage._customEvent)
        case 6: try decoder.decodeSingularStringField(value: &_storage._feature)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._campaignID)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._entityID)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._properties)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._uuid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._eventType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._customEvent {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._feature {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._campaignID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._entityID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
      }
      if !_storage._properties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._properties, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireEvent, rhs: JetFireEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._customEvent != rhs_storage._customEvent {return false}
        if _storage._feature != rhs_storage._feature {return false}
        if _storage._campaignID != rhs_storage._campaignID {return false}
        if _storage._entityID != rhs_storage._entityID {return false}
        if _storage._properties != rhs_storage._properties {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireCampaign: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Campaign"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "push"),
    3: .same(proto: "toaster"),
    4: .same(proto: "stories"),
    5: .same(proto: "data"),
    6: .same(proto: "priority"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _push: JetFireFeaturePush? = nil
    var _toaster: JetFireFeatureToaster? = nil
    var _stories: [JetFireFeatureStory] = []
    var _data: JetFireFeatureData? = nil
    var _priority: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _push = source._push
      _toaster = source._toaster
      _stories = source._stories
      _data = source._data
      _priority = source._priority
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._priority == nil {return false}
      if let v = _storage._push, !v.isInitialized {return false}
      if let v = _storage._toaster, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._stories) {return false}
      if let v = _storage._data, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._push)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._toaster)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._stories)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._priority)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._push {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._toaster {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._stories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stories, fieldNumber: 4)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._priority {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireCampaign, rhs: JetFireCampaign) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._push != rhs_storage._push {return false}
        if _storage._toaster != rhs_storage._toaster {return false}
        if _storage._stories != rhs_storage._stories {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._priority != rhs_storage._priority {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireListCampaignsRequest: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ListCampaignsRequest"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    3: .same(proto: "user"),
    4: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _user: JetFireUser? = nil
    var _session: JetFireSession? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 3: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireListCampaignsRequest, rhs: JetFireListCampaignsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireUpdateUserProperties: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UpdateUserProperties"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "user"),
    3: .same(proto: "session"),
    4: .standard(proto: "property_operations"),
  ]

  fileprivate class _StorageClass {
    var _user: JetFireRequestUser? = nil
    var _session: JetFireRequestSession? = nil
    var _propertyOperations: [JetFirePropertyOperation] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _session = source._session
      _propertyOperations = source._propertyOperations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._propertyOperations) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._session)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._propertyOperations)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._propertyOperations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._propertyOperations, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireUpdateUserProperties, rhs: JetFireUpdateUserProperties) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._propertyOperations != rhs_storage._propertyOperations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireUpdateSessionProperties: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UpdateSessionProperties"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "user"),
    3: .same(proto: "session"),
    4: .standard(proto: "property_operations"),
  ]

  fileprivate class _StorageClass {
    var _user: JetFireRequestUser? = nil
    var _session: JetFireRequestSession? = nil
    var _propertyOperations: [JetFirePropertyOperation] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _session = source._session
      _propertyOperations = source._propertyOperations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._propertyOperations) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._session)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._propertyOperations)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._propertyOperations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._propertyOperations, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireUpdateSessionProperties, rhs: JetFireUpdateSessionProperties) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._propertyOperations != rhs_storage._propertyOperations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireRegisterEventsRequest: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RegisterEventsRequest"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "user"),
    3: .same(proto: "session"),
    4: .same(proto: "events"),
  ]

  fileprivate class _StorageClass {
    var _user: JetFireRequestUser? = nil
    var _session: JetFireRequestSession? = nil
    var _events: [JetFireEvent] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _session = source._session
      _events = source._events
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._events) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._session)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._events)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._events.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._events, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireRegisterEventsRequest, rhs: JetFireRegisterEventsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._events != rhs_storage._events {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireListCampaignsResponse: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ListCampaignsResponse"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "total"),
    3: .same(proto: "campaigns"),
    4: .same(proto: "sql"),
  ]

  fileprivate class _StorageClass {
    var _total: Int32? = nil
    var _campaigns: [JetFireCampaign] = []
    var _sql: JetFireFeaturesSql? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _total = source._total
      _campaigns = source._campaigns
      _sql = source._sql
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._total == nil {return false}
      if _storage._sql == nil {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._campaigns) {return false}
      if let v = _storage._sql, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._total)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._campaigns)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._sql)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._total {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if !_storage._campaigns.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._campaigns, fieldNumber: 3)
      }
      if let v = _storage._sql {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireListCampaignsResponse, rhs: JetFireListCampaignsResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._total != rhs_storage._total {return false}
        if _storage._campaigns != rhs_storage._campaigns {return false}
        if _storage._sql != rhs_storage._sql {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireOkResponse: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OkResponse"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "code"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt32Field(value: &self._code)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireOkResponse, rhs: JetFireOkResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireErrorResponse: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ErrorResponse"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "code"),
    3: .same(proto: "message"),
    4: .standard(proto: "system_message"),
    5: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    if self._type == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt32Field(value: &self._code)
      case 3: try decoder.decodeSingularStringField(value: &self._message)
      case 4: try decoder.decodeSingularStringField(value: &self._systemMessage)
      case 5: try decoder.decodeSingularStringField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._systemMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireErrorResponse, rhs: JetFireErrorResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs._systemMessage != rhs._systemMessage {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireJwt: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Jwt"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "token"),
  ]

  public var isInitialized: Bool {
    if self._token == nil {return false}
    return true
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._token)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._token {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireJwt, rhs: JetFireJwt) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireRequest: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Request"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "ip"),
  ]

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._ip)
      default: break
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ip {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireRequest, rhs: JetFireRequest) -> Bool {
    if lhs._ip != rhs._ip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireRegisterUserAndSessionMessage: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RegisterUserAndSessionMessage"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "jwt"),
    3: .same(proto: "salt"),
    4: .same(proto: "request"),
    5: .same(proto: "user"),
    6: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _jwt: JetFireJwt? = nil
    var _salt: String? = nil
    var _request: JetFireRequest? = nil
    var _user: JetFireUser? = nil
    var _session: JetFireSession? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _salt = source._salt
      _request = source._request
      _user = source._user
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._jwt == nil {return false}
      if _storage._salt == nil {return false}
      if _storage._request == nil {return false}
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._jwt, !v.isInitialized {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._jwt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._salt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._jwt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._salt {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireRegisterUserAndSessionMessage, rhs: JetFireRegisterUserAndSessionMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._salt != rhs_storage._salt {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireUpdateUserPropertiesMessage: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UpdateUserPropertiesMessage"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "jwt"),
    3: .same(proto: "salt"),
    4: .same(proto: "request"),
    5: .same(proto: "user"),
    6: .same(proto: "session"),
    7: .standard(proto: "property_operations"),
  ]

  fileprivate class _StorageClass {
    var _jwt: JetFireJwt? = nil
    var _salt: String? = nil
    var _request: JetFireRequest? = nil
    var _user: JetFireRequestUser? = nil
    var _session: JetFireRequestSession? = nil
    var _propertyOperations: [JetFirePropertyOperation] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _salt = source._salt
      _request = source._request
      _user = source._user
      _session = source._session
      _propertyOperations = source._propertyOperations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._jwt == nil {return false}
      if _storage._salt == nil {return false}
      if _storage._request == nil {return false}
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._jwt, !v.isInitialized {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._propertyOperations) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._jwt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._salt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._session)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._propertyOperations)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._jwt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._salt {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._propertyOperations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._propertyOperations, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireUpdateUserPropertiesMessage, rhs: JetFireUpdateUserPropertiesMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._salt != rhs_storage._salt {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._propertyOperations != rhs_storage._propertyOperations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireUpdateSessionPropertiesMessage: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UpdateSessionPropertiesMessage"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "jwt"),
    3: .same(proto: "salt"),
    4: .same(proto: "request"),
    5: .same(proto: "user"),
    6: .same(proto: "session"),
    7: .standard(proto: "property_operations"),
  ]

  fileprivate class _StorageClass {
    var _jwt: JetFireJwt? = nil
    var _salt: String? = nil
    var _request: JetFireRequest? = nil
    var _user: JetFireRequestUser? = nil
    var _session: JetFireRequestSession? = nil
    var _propertyOperations: [JetFirePropertyOperation] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _salt = source._salt
      _request = source._request
      _user = source._user
      _session = source._session
      _propertyOperations = source._propertyOperations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._jwt == nil {return false}
      if _storage._salt == nil {return false}
      if _storage._request == nil {return false}
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if let v = _storage._jwt, !v.isInitialized {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      if !JetfireProtobuf.Internal.areAllInitialized(_storage._propertyOperations) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._jwt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._salt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._session)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._propertyOperations)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._jwt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._salt {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._propertyOperations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._propertyOperations, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireUpdateSessionPropertiesMessage, rhs: JetFireUpdateSessionPropertiesMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._salt != rhs_storage._salt {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._propertyOperations != rhs_storage._propertyOperations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JetFireEventMessage: JetfireProtobuf.Message, JetfireProtobuf._MessageImplementationBase, JetfireProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventMessage"
  static let _protobuf_nameMap: JetfireProtobuf._NameMap = [
    2: .same(proto: "jwt"),
    3: .same(proto: "salt"),
    4: .same(proto: "request"),
    5: .same(proto: "user"),
    6: .same(proto: "session"),
    7: .same(proto: "event"),
  ]

  fileprivate class _StorageClass {
    var _jwt: JetFireJwt? = nil
    var _salt: String? = nil
    var _request: JetFireRequest? = nil
    var _user: JetFireRequestUser? = nil
    var _session: JetFireRequestSession? = nil
    var _event: JetFireEvent? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _salt = source._salt
      _request = source._request
      _user = source._user
      _session = source._session
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._jwt == nil {return false}
      if _storage._salt == nil {return false}
      if _storage._request == nil {return false}
      if _storage._user == nil {return false}
      if _storage._session == nil {return false}
      if _storage._event == nil {return false}
      if let v = _storage._jwt, !v.isInitialized {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      if let v = _storage._event, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: JetfireProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._jwt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._salt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._session)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._event)
        default: break
        }
      }
    }
  }

  func traverse<V: JetfireProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._jwt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._salt {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JetFireEventMessage, rhs: JetFireEventMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._salt != rhs_storage._salt {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
